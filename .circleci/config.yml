version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@7.2.0
build-steps: &build-steps
  steps:
    - checkout
    - restore_cache:
        keys: 
          - key-{{ checksum "yarn.lock" }}-{{ checksum "package.json" }}
    - run:
        name: install dependency
        command: yarn
    - save_cache:
        key: key-{{ checksum "yarn.lock" }}-{{ checksum "package.json" }}
        paths:
          - node_modules/
    - run:
        name: build backend
        command: |
          yarn be:build
          yarn fe:build
    - persist_to_workspace:
        root: .
        paths:
          - public
          - dist
          - Dockerfile
deploy-fe-steps: &deploy-fe-steps
  steps:
    - run:
        name: "install utility"
        command: yum install tar gzip -y
    - attach_workspace:
        at:  .
    - run:
        name: deploy frontend to s3 
        command: |
          ls -la
          aws s3 sync public/ s3://${S3_BUCKET}/

deploy-service-steps: &deploy-service-steps
  steps:
    - checkout
    - run:
        name: "Deploy GKE cluster"
        command: ./deployment/cluster/eks.sh
    - run:
        name: "Deploy Service"
        command: |
          ./deployment/kubernetes/deployment.yaml.sh
          ./deployment/kubernetes/service.yaml.sh
          ELB_ADDRESS=$(kubectl get service ${SERVICE_NAME} -o json | jq -r '.status.loadBalancer.ingress[].hostname')
          echo "export ELB_ADDRESS=$ELB_ADDRESS" >> $BASH_ENV



deploy-ingress-steps: &deploy-ingress-steps
  steps:
    - checkout
    - run:
        name: "Deploy Ingress"
        command: ./deployment/cluster/ingress.sh

jobs:
  build:
    working_directory: ~/workdir
    docker:
      - image: mhart/alpine-node:16
    <<: *build-steps

  deploy-fe:
    working_directory: ~/workdir
    docker:
      - image: amazon/aws-cli:2.2.26
    environment:
      S3_BUCKET: "demo.c2pig.com"
    <<: *deploy-fe-steps

  deploy-service:
    working_directory: ~/workdir
    docker:
      - image: weaveworks/eksctl:0.66.0
    <<: *deploy-service-steps
    environment:
      CLUSTER_NAME: "demo"
      SERVICE_NAME: "demo-backend"

  deploy-ingress:
    working_directory: ~/workdir
    docker:
      - image: amazon/aws-cli:2.2.26
    <<: *deploy-ingress-steps
    environment:
      SERVICE_DOMAIN: "demo-api.c2pig.com"
      SERVICE_NAME: "demo-backend"


workflows:
  version: 2
  ci:
    jobs:
      - approval:
          type: approval
      - build:
          requires:
            - approval
      - aws-ecr/build-and-push-image:
          context: credentials
          attach-workspace: true
          workspace-root: workspace
          path: workspace
          repo: payroll-backend
          tag: latest,${CIRCLE_SHA1}
          requires:
            - build
      - deploy-fe:
          context: credentials
          requires:
            - build
      - deploy-service:
          context: credentials
          requires:
            - aws-ecr/build-and-push-image 
      - deploy-ingress:
          context: credentials
          requires:
            - deploy-service

